name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run unit tests with JaCoCo
      run: |
        echo "Running Maven tests..."
        mvn clean compile test-compile
        mvn test jacoco:report -Dmaven.test.failure.ignore=true
        echo "=== Checking JaCoCo report generation ==="
        ls -la target/site/jacoco/ || echo "No JaCoCo site directory"
        find . -name "jacoco.xml" -type f || echo "No jacoco.xml found anywhere"
      
    - name: List test discovery and results
      run: |
        echo "=== Test Discovery Debug ==="
        find . -name "*Test.java" -type f | head -10
        echo "=== Maven Surefire Reports Directory ==="
        ls -la target/ || echo "No target directory"
        ls -la target/surefire-reports/ || echo "No surefire-reports directory"
        echo "=== Test Result Files ==="
        find . -name "*.xml" -path "*/surefire-reports/*" -type f || echo "No surefire XML files found"
        find . -name "TEST-*.xml" -type f || echo "No TEST-*.xml files found"
        echo "=== All XML files in target ==="
        find target/ -name "*.xml" -type f || echo "No XML files in target"
        echo "=== Directory structure ==="
        ls -la target/surefire-reports/ || echo "surefire-reports doesn't exist"
        
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Maven Tests
        path: |
          **/surefire-reports/TEST-*.xml
          **/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false
        fail-on-empty: false
        
    - name: Fallback test report generation
      if: always()
      run: |
        echo "=== Attempting to run tests again with verbose output ==="
        mvn surefire:test -Dmaven.test.failure.ignore=true || true
        echo "=== Check if any tests ran ==="
        cat target/surefire-reports/*.txt || echo "No test result txt files"
        
    - name: Run mutation testing with PIT
      run: mvn org.pitest:pitest-maven:mutationCoverage
      continue-on-error: true
        
    - name: Verify JaCoCo report before Codecov upload
      run: |
        echo "=== Verifying JaCoCo report exists ==="
        if [ -f "./target/site/jacoco/jacoco.xml" ]; then
          echo " JaCoCo report found at ./target/site/jacoco/jacoco.xml"
          ls -la ./target/site/jacoco/jacoco.xml
          echo "File size: $(wc -c < ./target/site/jacoco/jacoco.xml) bytes"
        else
          echo " JaCoCo report NOT found at expected location"
          echo "Searching for jacoco.xml files..."
          find . -name "jacoco.xml" -type f || echo "No jacoco.xml files found anywhere"
        fi
        
    - name: Upload JaCoCo coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          target/site/jacoco/
          target/pit-reports/
          target/surefire-reports/
          target/test-classes/
        retention-days: 30
        
    - name: Build JAR artifact
      run: mvn clean package -DskipTests
      
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: calendar-jar
        path: target/*.jar
        retention-days: 90

  quality-gate:
    needs: test-and-coverage
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-reports
        path: target/
        
    - name: Quality Gate - Check coverage thresholds
      run: |
        echo "Checking quality gates..."
        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          echo "JaCoCo coverage report found"
          
          # Extract line coverage percentage from JaCoCo XML (correct format)
          line_missed=$(grep -o '<counter type="LINE"[^>]*missed="[0-9]*"' target/site/jacoco/jacoco.xml | head -1 | grep -o 'missed="[0-9]*"' | cut -d'"' -f2)
          line_covered=$(grep -o '<counter type="LINE"[^>]*covered="[0-9]*"' target/site/jacoco/jacoco.xml | head -1 | grep -o 'covered="[0-9]*"' | cut -d'"' -f2)
          
          if [ -n "$line_missed" ] && [ -n "$line_covered" ]; then
            total_lines=$((line_missed + line_covered))
            if [ $total_lines -gt 0 ]; then
              coverage_percentage=$((line_covered * 100 / total_lines))
              echo "Line coverage: $coverage_percentage% ($line_covered/$total_lines lines)"
              
              # Check if coverage meets threshold (85%)
              if [ $coverage_percentage -ge 85 ]; then
                echo "Coverage threshold met: $coverage_percentage% >= 85%"
              else
                echo "Coverage below threshold: $coverage_percentage% < 85%"
                echo "::warning::Coverage is below the 85% threshold"
                # Don't fail the build, just warn
              fi
            else
              echo "No lines found to measure coverage"
            fi
          else
            echo "Could not parse coverage data from JaCoCo XML"
          fi
        else
          echo "Coverage report not found"
        fi
        
    - name: Status check
      run: |
        echo "Quality gates completed!"
        echo "Test reports and coverage artifacts uploaded"
        echo "Ready for deployment" 